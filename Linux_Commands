1. Man <commmand> - go to Manual.
2. ls - list all the file a folder contains
3. cd- change directory

4. mdkir foldr name- make a folder
   mkdir -p foder name/nested folder- use to make nested folder

5. rmdir folder name- remove a folder(folder must be empty)
   rm -rf folder name(remove folder with files)

6. cd .. - back to the home folder

7. pwd- present working directory

8. touch file name - create an empty file

9. mv file name folder name - will move file to that folder

10. cp file name folder name -copy a file into a folder
    cp -r folder1_name folder_name2 - copying a folder1 into folder 2  

11. open file name - open a file 

12. find- used to find files or folders matching a particular search pattern.
 i)   find . -type f -name file name (find file)
ii)  find . -type d -name directory name (find directories) 
iii) find . -type l -name link name (search link)

13. ln - create link
    ln <original> link (hard link created) :  delete the original file, link will still work
    ln -s <original> link(soft link created): delete the original file,link will be broken 

14.i)gzip filename - will compress the file, create .gz file and delete original file
   
   ii) gzip -<number>filename
       1 - worst but fastest
       9 -best but slowest

   iii) gzip -c filename > filename.gz : create .gz file without deleting original file
    
   iv) gzip -r foldername : compress all the file in a directory
   
   v) gzip -d filename.gz  : decompress the file
   
   15). gunzip- basically gzip command except -d option always enabled :gunzip filename.gz

     gunzip -c filename.z > anotherfilename  : extract to differemt filesname using output redirecton(>) using -c option

16). tar(tape archive) : use to create an archive grouping file into single file

     i) tar -cf archive.tar file1 file2  : c option stands for create. The f option is used to write to file the archive.

      ii) tar -xf archive.tar   : extract file from archive

      iii) tar -xf archive.tar -C directory  :to extract them to a specific directory

      iv) tar -czf archive.tar.gz file1 file2  :tar is often used to create a compressed archive, gzipping the archive.
              like creating a tar archive, and then running gzip on it.

      v) tar -xf archive.tar.gz  :To unarchive a gzipped archive

17). Alias - ls -al --print something more useful than alone ls command

      alias ll='ls -al' -:create a new command, for example I like to call it ll.

      The alias will work until the terminal session is closed.

18). cat :prints a file's content to the standard output.
     cat file1 file2 > file3  :concatenate the content of multiple files into a new file
     cat -n file1 :see the line with line numbers.

19)  less <filename>  : shows you the content stored inside a file.Press q to quit.

20) tail -- tail -n 10 <filename> :can print the last 10 lines in a file.
            tail -f filename : opens the file at the end, and watches for file changes.

21). wc -   wc command gives us useful information about a file or input it receives via pipes. 
            wc <filename> : The first column returned is the number of lines. The second is the number of words. The third is the number of bytes.

22). grep(global regular expression print): search in files, or combine it with pipes to filter the output of another command.

23). i) sort file.txt ----helps to sort the item of the file

      ii) sort -r filename.txt--- reverse the order
      
      iii) Sorting by default is case sensitive, and alphabetic. Use the --ignore-case option to sort case insensitive, and -n option to sort a numeric order.
          
      iv) sort -u file.txt--- Remove any duplicate in the file

24). i) uniq ---- a command useful to sort lines of text.

     ii) sort filename.txt | uniq :: uniq  will only detect adjacent duplicate lines.This implies that you will most likely use it along with sort
     
     iii) sort filename.txt | uniq -d :: only display duplicate lines
 
     iv) sort filename.txt | uniq -u  :: only display non-duplicate lines

     v) sort filename.txt | uniq -c :: count the occurence of each lines 

     vi) sort filename.txt | uniq -c | sort -nr :: sort lines by most frequent

25). diff file1.txt file2.txt ---  diff  will process the 2 files and will tell you what's the difference.

     diff file1.txt file2.txt -y --- compare 2 file line by line

26) i) echo  = prints to the output the argument passed to it

    ii) echo "hello" >> output.txt  = append output ex. "hello" to a file name output.txt

    iii) echo {1..5} = generate a list of strings

    iv) special characters need to be escaped with a backslash \  ex. echo the cost is \$5

    v)  echo "The path variable is $PATH" = interpolate environment variables
    
    vi) echo * = echo the files in the current folder

    vii) echo o* = echo the files in the current folder that start with the letter o

    ix) echo ~ = print your home folder path

    x) echo "$(ls -al)" = execute commands, and print the result to the standard output

27)  i)  sudo chown <owner> <file> :Change ownership of a file form root user to anothet user, example: chown flavio test.txt

    ii) chown -R <owner> <file> : change the ownership of a directory and all the file it contained 

    iii) chown <owner>:<group> <file> : change the ownership and group of a file
   
    vi) chgrp <group> <filename> :  change the group of the a file using chgrp

28) dwrxrwxrwx - i)   dwrx = first set represents the permissions of the owner of the file

                 ii)  rwx = The second set represents the permissions of the members of the group the file is associated to

                 iii) rwx = represents the permissions of the everyone else
                 
                  iv)  -  :means it's a normal file
                       d  :means it's a directory
                       l  :means it's a link

v) rwx : means that specific person has read, write and execution access. Anything that is removed is swapped with - in rwx ex. r-x,rw-,r--
  
vi) can change the permissions given to a file using the chmod command. can be done in 2 ways. 1.Symbolic arguments 2.Numeric arguments
     
	1) Symbolic arguments :a) You type chmod followed by a space, and a letter:
 				               i)  a  :stands for all
 				               ii) u  :stands for user
 				               iii) g  :stands for group
 				               iv) o  :stands for others

			       b)Then you type either + or - to add a permission, or to remove it.

                               c) Then you add one or more permission symbols (r,w,x).

			       d) All followed by the file or folder name.

                                        ex. chmod a+r filename #everyone can now read
			                chmod a+rw filename #everyone can now read and write
			                chmod o-rwx filename #others (not the owner, not in group)
					
29) umask: new created file have default permission, umask helps to modify them

	i) umask with no arguments will show you the current umask : 0002 (an octal value that represent the permissions)
        
        ii) umask -S : see a human-readable notation(ex. u=rwx,g=rwx,o=rx)
      
	iii) In the numeric notation, we typically change the last 3 digits.

		Here's a list that gives a meaning to the number:
			 0  :read, write, execute
			 1  :read and write
			 2  :read and execute
			 3  :read only
			 4  :write and execute
			 5  :write only
			 6  :execute only
			 7  :no permissions
		ex. umask 002 - changing the umask value from 0002 to 002 in numeric foramt

30) a) du: calculate the size of a directory as a whole
    b) du * :calculate the size of each file individually
    c) du -m :display values in MegaBytes
    d) du -g :display values in Gigabytes
    e) du -h :show a human-readable notation for sizes of directory
    f) du -ah : print the size of each file in the directories

31) a) df :used to get disk usage information.print out info. of voulume mounted
    b) df -h :will show disk usage info. in human relatable format
    c) df directory_name : specify directory name to get information about volume

32) basename : If you run basename string: on a path string that points to a directory, you will get the last segment of the path.
      ex. basename /users/john/test.txt   will return strng - test.txt
          basenane/users/john       will return strin - john

33) dirname : you have a path to a file, for example /Users/john/test.txt  
              and run dirname /Users/john/test.txt will return /Users/john string

34) a) ps :list of user-initiated processes currently running in the current session.
    b) ps aux :list all processes
    c) the longer commands are cut, use ps axww :continue the command listing on a new line instead of cutting it.
    d) ps axww | grep "Visual Studio Code" : search for a specific process combining grep with a pipe
    e) coloumn return by ps :  1) PID,the process ID  2) TT,tells us the terminal id used
                               3) STAT, tells us the state of the process
                               i) I : process that sleeping longer than 20 seconds
                               ii) R : Running Process
                               iii) S : process that is sleeping for lesser than 20 seconds
                               iv) T : Stopped process
                               v) U : process in uninteruptable wait
                               vi) Z :dead process
   f) TIME :tells us how long the process has been running.

35) top : list the processes running in real time

36) a) kill <PID> : terminate a program given PID.
    By default, this sends the TERM  signal to terminate the process id specified.
    
    b) We can use flags to send other signals, including:
        kill -HUP <PID> :  HUP means hang up, It's sent automatically when a terminal window 
                           that started a process is closed before terminating the process

	kill -INT <PID> :INT means interrupt, and it sends the same signal used when we press ctrl-C in the terminal

	kill -KILL <PID> : killis not sent to the process, but to the operating system kernel,which
                           immediately stops and terminates the process.
	kill -TERM <PID> :TERM means terminate. The process will receive it and terminate itself.its Default signal sent bykill
 
	kill -CONT <PID> : CONT means continue. It can be used to resume a Stopped Process.
 
	kill -STOP <PID> : STOP is not sent to the process, but to the operating system kernel, which
                           immediately stops (but does not terminate) the process.
      
     c) You might see numbers used instead, like kill -1 <PID>
           1 :corresponds to HUP    2 :corresponds to INT
           9 :corresponds to kill  15 :corresponds to TERM
          18:corresponds to CONT

37) killall: a) killall <name> :kill multiple processes at once. name is name of the program.
             you can have multiple instances of the program running,

38) vim : a) vim filename : edit the file
          b) vim have two main mode: 1. command mode 2.Insert mode
          c) you can enter insert mode by typing i key.
          d) you can press Esc key to exit insert mode and go to command mode(can't edit in command mode)
          d) :w - Saving the File
          e) :wq - Save and Quit
          f) :q! - Quit Without Saving
          g) undo by pressing u in command mode
          h) redo by pressing ctrl-r
          i) pressing x delete the currently highlighted character
          j) pressing A goes at the end of the currently selected line
          k) press 0 to go to the start of the line
          l) go to the first character of word and press d followed by w to delete the word
          m) use a number between d and w. d3w - deletes 3 words forward
          n) press d followe by d to delete the a whole entire line
          o) press d followed by $ to delete the entire line from where cursor is, untill the end		
					
